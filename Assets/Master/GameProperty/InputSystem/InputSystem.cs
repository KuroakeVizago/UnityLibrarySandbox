//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Master/GameProperty/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""CharacterInput"",
            ""id"": ""e2b7bceb-3e51-4792-a0ac-41e3466f97cf"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""31b2f82e-fd1c-4866-aa68-35677545af07"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraLook"",
                    ""type"": ""Value"",
                    ""id"": ""98bb39d3-227d-4c33-b1e6-1e73fb7fdfe1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b2685a9d-7b01-4a68-bdb3-0d90f99be6fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""45b49b5b-e3a9-4e30-bb07-462fb5bdb8fd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8bc12d25-b2c5-47f4-9d92-bc99ba48c13b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ba6bdebd-b0d2-48fd-9445-2a11fc6a0a43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1de5194d-cc27-4708-be42-839e38b5f5e2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""376711b3-b05e-4fb6-9809-e119b7c512ba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d1eef604-dc7a-45e2-8315-24be215176ec"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1bf47814-3e0f-4e10-855d-4aa362e6bab0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLook"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3d3d3cb-0846-4aee-a4c9-44d23fc8a66d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6ab89f2a-1746-4651-bc07-7ed06f50674c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ead7fa44-1bca-464a-9848-8e963bf44e35"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e3e80d52-2a32-4997-8475-f87f57917bfa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MainMenuInput"",
            ""id"": ""92876d7e-360e-45c6-9554-878146c56d9c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""0dbc3343-4dec-476c-8d01-fd9a59fcf4ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99da9448-b8a4-45e7-ae45-65b01ccaf6ff"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterInput
        m_CharacterInput = asset.FindActionMap("CharacterInput", throwIfNotFound: true);
        m_CharacterInput_Movement = m_CharacterInput.FindAction("Movement", throwIfNotFound: true);
        m_CharacterInput_CameraLook = m_CharacterInput.FindAction("CameraLook", throwIfNotFound: true);
        m_CharacterInput_Interact = m_CharacterInput.FindAction("Interact", throwIfNotFound: true);
        // MainMenuInput
        m_MainMenuInput = asset.FindActionMap("MainMenuInput", throwIfNotFound: true);
        m_MainMenuInput_Newaction = m_MainMenuInput.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterInput
    private readonly InputActionMap m_CharacterInput;
    private ICharacterInputActions m_CharacterInputActionsCallbackInterface;
    private readonly InputAction m_CharacterInput_Movement;
    private readonly InputAction m_CharacterInput_CameraLook;
    private readonly InputAction m_CharacterInput_Interact;
    public struct CharacterInputActions
    {
        private @InputSystem m_Wrapper;
        public CharacterInputActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterInput_Movement;
        public InputAction @CameraLook => m_Wrapper.m_CharacterInput_CameraLook;
        public InputAction @Interact => m_Wrapper.m_CharacterInput_Interact;
        public InputActionMap Get() { return m_Wrapper.m_CharacterInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterInputActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterInputActions instance)
        {
            if (m_Wrapper.m_CharacterInputActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnMovement;
                @CameraLook.started -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnCameraLook;
                @CameraLook.performed -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnCameraLook;
                @CameraLook.canceled -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnCameraLook;
                @Interact.started -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CharacterInputActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_CharacterInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @CameraLook.started += instance.OnCameraLook;
                @CameraLook.performed += instance.OnCameraLook;
                @CameraLook.canceled += instance.OnCameraLook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public CharacterInputActions @CharacterInput => new CharacterInputActions(this);

    // MainMenuInput
    private readonly InputActionMap m_MainMenuInput;
    private IMainMenuInputActions m_MainMenuInputActionsCallbackInterface;
    private readonly InputAction m_MainMenuInput_Newaction;
    public struct MainMenuInputActions
    {
        private @InputSystem m_Wrapper;
        public MainMenuInputActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MainMenuInput_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_MainMenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuInputActions set) { return set.Get(); }
        public void SetCallbacks(IMainMenuInputActions instance)
        {
            if (m_Wrapper.m_MainMenuInputActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_MainMenuInputActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_MainMenuInputActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_MainMenuInputActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_MainMenuInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public MainMenuInputActions @MainMenuInput => new MainMenuInputActions(this);
    public interface ICharacterInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCameraLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IMainMenuInputActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
